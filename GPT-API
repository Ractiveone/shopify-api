import express from 'express';
import axios from 'axios';
import dotenv from 'dotenv';
import cheerio from 'cheerio'; // Neu: Web Scraping Modul

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());

// Shopify API Konfiguration
const SHOPIFY_STORE = process.env.SHOPIFY_STORE;
const SHOPIFY_ACCESS_TOKEN = process.env.SHOPIFY_ACCESS_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

// Shopify API Helper
async function getOrderData(query) {
    try {
        let searchField;
        if (query.includes('@')) {
            searchField = `email=${query}`;
        } else if (query.includes(' ')) {
            const [firstName, lastName] = query.split(' ');
            searchField = `customer.first_name=${firstName}&customer.last_name=${lastName}`;
        } else {
            searchField = `name=${query}`;
        }
        
        const response = await axios.get(`https://${SHOPIFY_STORE}/admin/api/2023-07/orders.json?${searchField}&status=any`, {
            headers: {
                'X-Shopify-Access-Token': SHOPIFY_ACCESS_TOKEN,
                'Content-Type': 'application/json'
            }
        });
        
        return response.data.orders.length > 0 ? response.data.orders[0] : null;
    } catch (error) {
        console.error('Fehler beim Abrufen der Bestellung:', error);
        return null;
    }
}

// ChatGPT API Helper
async function getChatGptResponse(message) {
    try {
        const response = await axios.post('https://api.openai.com/v1/chat/completions', {
            model: 'gpt-4',
            messages: [{ role: 'user', content: message }],
        }, {
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            }
        });
        return response.data.choices[0].message.content;
    } catch (error) {
        console.error('Fehler bei der Kommunikation mit ChatGPT:', error);
        return 'Fehler bei der Verarbeitung der Anfrage';
    }
}

// Tracking API Helper mit Web Scraping
async function getTrackingStatus(trackingNumber) {
    try {
        const url = `https://parcelsapp.com/en/tracking/${trackingNumber}`;
        const { data } = await axios.get(url, { headers: { 'User-Agent': 'Mozilla/5.0' } });
        
        const $ = cheerio.load(data);
        let trackingUpdates = [];

        // Tracking-Daten extrahieren
        $('.tracking-event').each((index, element) => {
            const date = $(element).find('.tracking-date').text().trim();
            const time = $(element).find('.tracking-time').text().trim();
            const status = $(element).find('.tracking-status').text().trim();
            const location = $(element).find('.tracking-location').text().trim() || 'Unknown location';

            trackingUpdates.push({
                date,
                time,
                status,
                location
            });
        });

        if (trackingUpdates.length === 0) {
            return { message: 'Keine Tracking-Updates gefunden. Bitte Tracking-Nummer überprüfen.' };
        }

        return {
            trackingNumber,
            updates: trackingUpdates
        };

    } catch (error) {
        console.error('Fehler beim Abrufen der Sendungsverfolgung:', error);
        return { message: 'Fehler beim Abrufen der Tracking-Daten. Bitte später erneut versuchen.' };
    }
}

// API Endpoint für Bestelldetails
app.get('/order/:query', async (req, res) => {
    const query = req.params.query;
    const orderData = await getOrderData(query);
    
    if (!orderData) {
        return res.status(404).json({ message: 'Bestellung nicht gefunden' });
    }
    
    res.json(orderData);
});

// API Endpoint für ChatGPT
app.post('/chatgpt', async (req, res) => {
    const { message } = req.body;
    if (!message) {
        return res.status(400).json({ error: 'Nachricht erforderlich' });
    }
    const response = await getChatGptResponse(message);
    res.json({ response });
});

// API Endpoint für Tracking-Status mit Web Scraping
app.get('/track/:trackingNumber', async (req, res) => {
    const trackingNumber = req.params.trackingNumber;
    const trackingData = await getTrackingStatus(trackingNumber);
    
    if (!trackingData || trackingData.updates.length === 0) {
        return res.status(404).json({ message: 'Tracking-Daten nicht gefunden' });
    }
    
    res.json(trackingData);
});

// Server starten
app.listen(PORT, () => {
    console.log(`Server läuft auf Port ${PORT}`);
});
